Описание:

Этот код реализует серверную часть системы, которая управляет данными о погоде, собираемыми от различных сенсоров. Вся система состоит из нескольких модулей, каждый из которых отвечает за определенную часть функционала. 
Рассмотрим каждый файл по отдельности:

 1. migration.py
Этот файл отвечает за создание таблицы в базе данных и её заполнение случайными данными для тестирования.

- Импорт необходимых модулей: `sqlalchemy`, `datetime`, `random`, `os`, `dotenv`.
- Определение базы данных и таблицы: `WeatherDto` с полями `id`, `temperature`, `humidity`, `pressure`, `windspeed`, `timestamp`, `sensor_id`.
- Подключение к базе данных: использование переменной окружения `SQLALCHEMY_DATABASE_URL`.
- Создание таблицы: `Base.metadata.create_all(bind=engine)`.
- Заполнение таблицы случайными данными: создается экземпляр `WeatherDto` со случайными значениями для всех полей, затем добавляется в сессию и коммитится в базу данных.

 2. tcp_server.py
Этот файл реализует TCP сервер, который принимает данные от сенсоров.

- Инициализация TCP сервера: принимаются `host`, `port` и список сенсоров.
- Обработка клиента: метод `handle_client`, который считывает данные, декодирует их из JSON и добавляет идентификатор сенсора в список, если он отсутствует.
- Запуск сервера: метод `start_server` создает и запускает TCP сервер на указанном хосте и порту.

 3. routes.py
Этот файл определяет маршруты API, используемые для взаимодействия с системой.

- Импорт необходимых модулей: `fastapi`, `asyncio`, `os`, другие модули из приложения.
- Инициализация: загрузка переменных окружения и создание экземпляра TCP сервера.
- Маршруты API:
  - `@router.get("/weather/{sensor_id}")`: получение текущей погоды по идентификатору сенсора.
  - `@router.get("/sensors")`: получение списка сенсоров.
  - `@router.post("/weather")`: добавление новых данных о погоде.
  - `@router.get("/weather/{sensor_id}/history")`: получение истории данных о погоде по сенсору.

 4. __init__.py
Файл инициализации FastAPI приложения.

- Создание экземпляра FastAPI.
- Подключение маршрутов: `app.include_router(app_router)`.

 5. sensor_dto.py
Описание модели данных для сенсоров с использованием Pydantic.

- Класс Sensor: с полями `id` и `description`.

 6. weather_dto.py
Описание модели данных для погоды с использованием SQLAlchemy.

- Класс WeatherDto: идентичен определению в `migration.py`.

 7. weather_request_dto.py
Описание модели данных для запроса погоды с использованием Pydantic.

- Класс WeatherRequest: с полями для температуры, влажности, давления, скорости ветра, времени и идентификатора сенсора.

 8. weather_responce_dto.py
Описание модели данных для ответа с погодой с использованием Pydantic.

- Класс Weather: с полями для температуры, влажности, давления, скорости ветра, времени и идентификатора сенсора.

 9. weather_service.py
Сервис для работы с данными о погоде.

- Инициализация базы данных: подключение к базе данных и создание движка.
- Методы:
  - `add_weather`: добавление новых данных о погоде.
  - `get_weather`: получение последних данных о погоде по идентификатору сенсора.
  - `get_weather_history`: получение истории данных о погоде по идентификатору сенсора.

 10. main.py
Файл для запуска приложения.

- Запуск сервера: использование `uvicorn` для запуска FastAPI приложения на указанном хосте и порту.

 Общая структура:
- SQLAlchemy используется для работы с базой данных.
- FastAPI используется для создания API.
- asyncio используется для работы с асинхронными задачами, включая TCP сервер.
- Pydantic используется для валидации данных.

Все эти компоненты работают вместе, чтобы создать систему, которая собирает данные от сенсоров, сохраняет их в базе данных и предоставляет доступ к этим данным через API.